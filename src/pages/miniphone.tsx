import React, { useEffect, useState } from 'react';
import dynamic from 'next/dynamic';
import { setSipAccounts, setSelectedAccount, setUserPhones } from '@/entities/WebRtc/model/slice';
import store, { RootState } from '@/app/store';
import { useAuth } from '@/hooks/useAuth'
import { apiClient } from '@/lib/api'
import { useSelector } from 'react-redux';

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è SSR –æ—à–∏–±–æ–∫
const DialerTelegram = dynamic(() => import('@/widgets/Dialer/dialer-telegram'), {
  ssr: false,
  loading: () => <div className="bg-white rounded-2xl shadow-lg p-6 text-center">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
});

const MiniPhone = () => {
  const { user, isAuthenticated, isLoading, loginWithTelegram } = useAuth()
  const [isClient, setIsClient] = useState(false)
  const [authError, setAuthError] = useState<string | null>(null)
  const [attemptedAuth, setAttemptedAuth] = useState(false);
  const sessionState = useSelector((state: RootState) => state.sip.sessionState);
  const userPhones = useSelector((state: RootState) => state.sip.userPhones);
  
  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏
  useEffect(() => {
    setIsClient(true)
  }, [])
  
  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞)
  useEffect(() => {
    if (isClient && !isAuthenticated && !isLoading && !attemptedAuth) {
      const handleTelegramAuth = async () => {
        if (typeof window !== 'undefined' && window.Telegram?.WebApp) {
          const tg = window.Telegram.WebApp;
          const initData = tg.initData;
          
          if (initData) {
            console.log('üîê Attempting Telegram authentication...');
            const result = await loginWithTelegram(initData);
            
            if (!result.success) {
              setAuthError(result.error || '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
              console.error('‚ùå Authentication failed:', result.error);
            } else {
              console.log('‚úÖ Authentication successful:', result.user);
              setAuthError(null);
            }
          } else {
            setAuthError('–î–∞–Ω–Ω—ã–µ Telegram –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
          }
        } else {
          setAuthError('Telegram Web App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }
      };

      // –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–∏–∫–ª–∏—Ç—å—Å—è –Ω–∞ 403
      setAttemptedAuth(true);
      handleTelegramAuth();
    }
  }, [isClient, isAuthenticated, isLoading, attemptedAuth, loginWithTelegram]);

  useEffect(() => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    if (isAuthenticated && typeof window !== 'undefined' && window.Telegram?.WebApp) {
      const tg = window.Telegram.WebApp;
      
      try {
        // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        if (tg.expand) {
          tg.expand();
        }
        
        // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if (tg.enableClosingConfirmation) {
          tg.enableClosingConfirmation();
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        if (tg.MainButton) {
          tg.MainButton.setText('üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å');
          tg.MainButton.show();
          tg.MainButton.disable(); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        }
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if (tg.requestWriteAccess) {
          tg.requestWriteAccess((granted) => {
            if (granted) {
              console.log('‚úÖ Microphone access granted');
            } else {
              console.log('‚ùå Microphone access denied');
              if (tg.showAlert) {
                tg.showAlert('–î–ª—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
              }
            }
          });
        } else {
          console.log('‚ö†Ô∏è requestWriteAccess not supported in this Telegram version');
          // –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ WebRTC API
          if (navigator.mediaDevices?.getUserMedia) {
            navigator.mediaDevices.getUserMedia({ audio: true })
              .then(() => console.log('‚úÖ Microphone access granted via WebRTC'))
              .catch(() => console.log('‚ùå Microphone access denied via WebRTC'));
          }
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        if (tg.onEvent) {
          tg.onEvent('viewportChanged', () => {
            console.log('Viewport changed:', tg.viewportHeight);
          });
        }
        
        console.log('‚úÖ Telegram Web App initialized');
        console.log('User:', tg.initDataUnsafe?.user);
        console.log('Platform:', tg.platform);
        console.log('Version:', tg.version);
        
      } catch (error) {
        console.error('‚ùå Error initializing Telegram Web App:', error);
      }
    }
  }, [isAuthenticated]);

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º SIP –∞–∫–∫–∞—É–Ω—Ç—ã –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API
    const loadUserData = async () => {
      if (!isAuthenticated) return;

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º SIP –∞–∫–∫–∞—É–Ω—Ç—ã
        console.log('üì° Loading SIP accounts...');
        const sipResponse = await apiClient.getSipAccounts();
        
        if (sipResponse.success && sipResponse.data) {
          const accounts = (sipResponse.data as any).accounts || [];
          console.log('‚úÖ SIP accounts loaded:', accounts);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ store
          store.dispatch(setSipAccounts(accounts));
          
          // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
          const activeAccount = accounts.find((acc: any) => acc.is_active);
          if (activeAccount) {
            store.dispatch(setSelectedAccount(activeAccount));
            console.log('‚úÖ Selected account:', activeAccount);
          }
        } else {
          console.error('‚ùå Failed to load SIP accounts:', sipResponse.error);
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('üì± Loading user phones...');
        const phonesResponse = await apiClient.getUserPhones();
        
        if (phonesResponse.success && phonesResponse.data) {
          const phones = phonesResponse.data.phones || [];
          console.log('‚úÖ User phones loaded:', phones);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω—ã –≤ store
          store.dispatch(setUserPhones(phones));
        } else {
          console.error('‚ùå Failed to load user phones:', phonesResponse.error);
        }
      } catch (error) {
        console.error('‚ùå Error loading user data:', error);
      }
    };

    loadUserData();
  }, [isAuthenticated]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  if (authError) {
    const handleRegistrationRequest = async () => {
      try {
        if (typeof window !== 'undefined' && window.Telegram?.WebApp?.initDataUnsafe?.user) {
          const u = window.Telegram.WebApp.initDataUnsafe.user;
          const payload = { telegram_id: String(u.id), username: u.username };
          const res = await fetch('/api/auth/request-registration', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });
          if (res.ok) {
            alert('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.');
          } else {
            const data = await res.json().catch(() => ({}));
            alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É: ${data.error || res.status}`);
          }
        } else {
          alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏');
        }
      } catch (e) {
        alert('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏');
      }
    };

    const handleRetryAuth = () => {
      // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      setAuthError(null);
      setAttemptedAuth(false);
    };
    return (
      <div className="min-h-screen bg-gradient-to-br from-red-50 to-pink-100 p-4 flex items-center justify-center">
        <div className="max-w-md mx-auto text-center">
          <div className="bg-white rounded-2xl shadow-lg p-8">
            <div className="text-6xl mb-4">üîí</div>
            <h1 className="text-2xl font-bold text-gray-800 mb-2">
              –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
            </h1>
            <p className="text-gray-600 mb-6">
              {authError}
            </p>
            <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
              <p className="text-sm text-red-700">
                –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Telegram.
              </p>
            </div>
            <div className="flex flex-col sm:flex-row gap-3 justify-center">
              <button
                onClick={handleRetryAuth}
                className="mt-2 px-6 py-2 bg-gray-700 text-white rounded-lg hover:bg-gray-800"
              >
                –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
              </button>
              <button
                onClick={handleRegistrationRequest}
                className="mt-2 px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
              >
                –ó–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  if (!isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–û–∂–∏–¥–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-md mx-auto">
        <div className="text-center mb-6">
          <h1 className="text-2xl font-bold text-gray-800 mb-2">
            üìû MiniPhone
          </h1>
          <p className="text-sm text-gray-600">
            SIP —Ç–µ–ª–µ—Ñ–æ–Ω–∏—è –≤ Telegram
          </p>
          
          {user && (
            <div className="mt-3 p-3 bg-white rounded-lg shadow-sm">
              <p className="text-sm font-medium text-gray-700">
                üë§ {user.first_name} {user.last_name || ''}
              </p>
              {user.username && (
                <p className="text-xs text-gray-500">
                  @{user.username}
                </p>
              )}
              <p className="text-xs text-green-600 mt-1">
                ‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
              </p>
            </div>
          )}
        </div>
        
        <DialerTelegram />
        
        <div className="mt-6 text-center">
          <p className="text-xs text-gray-500">
            Powered by SIP.js & Telegram Web Apps
          </p>
        </div>
      </div>
    </div>
  );
}

export default MiniPhone;